<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestão Financeira Pessoal</title>
    <!-- Tailwind CSS para estilização -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Biblioteca SheetJS (xlsx) para exportar para Excel -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        /* Estilo para o corpo da página e fonte */
        body {
            font-family: 'Inter', sans-serif;
        }
        /* Estilo para placeholders */
        ::placeholder {
            color: #9ca3af;
        }
        /* Estilo para remover as setas do input number */
        input[type=number]::-webkit-inner-spin-button,
        input[type=number]::-webkit-outer-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        input[type=number] {
            -moz-appearance: textfield;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <div class="container mx-auto p-4 sm:p-6 lg:p-8 max-w-7xl">
        <!-- Cabeçalho da aplicação -->
        <header class="text-center mb-8">
            <h1 class="text-3xl sm:text-4xl font-bold text-gray-700">Sistema de Gestão Financeira</h1>
            <p class="text-gray-500 mt-2">Adicione seus lançamentos e exporte para Excel facilmente.</p>
        </header>

        <main class="bg-white p-6 rounded-2xl shadow-lg">
            <!-- Cabeçalho da Tabela de Lançamentos -->
            <div class="hidden md:grid grid-cols-12 gap-4 mb-2 font-semibold text-gray-600 px-4">
                <div class="col-span-2">Data</div>
                <div class="col-span-3">Descrição</div>
                <div class="col-span-2">Valor (R$)</div>
                <div class="col-span-2">Conta</div>
                <div class="col-span-2">Categoria</div>
                <div class="col-span-1"></div> <!-- Espaço para o botão de remover -->
            </div>

            <!-- Container para as linhas de lançamento -->
            <div id="lancamentos-container" class="space-y-4">
                <!-- As linhas de lançamento serão adicionadas aqui via JavaScript -->
            </div>

            <!-- Botões de Ação -->
            <div class="mt-6 flex flex-col sm:flex-row gap-4">
                <button id="add-row-btn" class="w-full sm:w-auto flex-grow bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition-transform transform hover:scale-105 flex items-center justify-center gap-2">
                    <i class="fas fa-plus-circle"></i>
                    Adicionar Novo Lançamento
                </button>
                <button id="export-btn" class="w-full sm:w-auto flex-grow bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition-transform transform hover:scale-105 flex items-center justify-center gap-2">
                    <i class="fas fa-file-excel"></i>
                    Exportar para Excel
                </button>
            </div>
        </main>
        
        <!-- Rodapé -->
        <footer class="text-center mt-8 text-gray-400 text-sm">
            <p>Desenvolvido Por Guilherme Barroso.</p>
        </footer>
    </div>

    <script>
        // --- ELEMENTOS DO DOM ---
        const lancamentosContainer = document.getElementById('lancamentos-container');
        const addRowBtn = document.getElementById('add-row-btn');
        const exportBtn = document.getElementById('export-btn');

        // --- DADOS PARA OS DROPDOWNS ---
        const contas = ["UNIÃO DINHEIRO", "UNIÃO NEXT"];
        const categorias = ["UNIÃO ENTRADA DINHEIRO", "UNIÃO SAÍDA DIÁRIA", "UNIÃO PIX MERCADO PAGO", "UNIÃO CRÉDITO TON", "UNIÃO DÉBITO TON"];

        // --- FUNÇÕES ---

        /**
         * Cria e adiciona uma nova linha de lançamento no formulário.
         */
        function adicionarLinha() {
            const rowId = `row-${Date.now()}`;
            const newRow = document.createElement('div');
            newRow.id = rowId;
            newRow.className = 'grid grid-cols-1 md:grid-cols-12 gap-4 items-center bg-gray-50 p-4 rounded-lg border';
            
            // Conteúdo HTML da nova linha
            newRow.innerHTML = `
                <!-- Campo Data -->
                <div class="col-span-12 md:col-span-2">
                    <label for="data-${rowId}" class="md:hidden text-sm font-medium text-gray-500">Data</label>
                    <input type="date" name="data" id="data-${rowId}" class="w-full p-2 border rounded-md bg-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                </div>
                <!-- Campo Descrição -->
                <div class="col-span-12 md:col-span-3">
                    <label for="descricao-${rowId}" class="md:hidden text-sm font-medium text-gray-500">Descrição</label>
                    <input type="text" name="descricao" id="descricao-${rowId}" placeholder="Ex: Compras no mercado" class="w-full p-2 border rounded-md bg-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                </div>
                <!-- Campo Valor -->
                <div class="col-span-12 md:col-span-2">
                    <label for="valor-${rowId}" class="md:hidden text-sm font-medium text-gray-500">Valor (R$)</label>
                    <input type="number" name="valor" id="valor-${rowId}" placeholder="0.00" step="0.01" class="w-full p-2 border rounded-md bg-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                </div>
                <!-- Campo Conta -->
                <div class="col-span-12 md:col-span-2">
                    <label for="conta-${rowId}" class="md:hidden text-sm font-medium text-gray-500">Conta</label>
                    <select name="conta" id="conta-${rowId}" class="w-full p-2 border rounded-md bg-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                        ${contas.map(c => `<option value="${c}">${c}</option>`).join('')}
                    </select>
                </div>
                <!-- Campo Categoria -->
                <div class="col-span-12 md:col-span-2">
                    <label for="categoria-${rowId}" class="md:hidden text-sm font-medium text-gray-500">Categoria</label>
                    <select name="categoria" id="categoria-${rowId}" class="w-full p-2 border rounded-md bg-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                        ${categorias.map(cat => `<option value="${cat}">${cat}</option>`).join('')}
                    </select>
                </div>
                <!-- Botão Remover -->
                <div class="col-span-12 md:col-span-1 flex justify-end">
                    <button class="remove-row-btn bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-3 rounded-md transition-transform transform hover:scale-110" data-rowid="${rowId}">
                        <i class="fas fa-trash-alt"></i>
                    </button>
                </div>
            `;

            lancamentosContainer.appendChild(newRow);
            
            // Adiciona o evento de clique para o novo botão de remover
            newRow.querySelector('.remove-row-btn').addEventListener('click', function() {
                const rowToRemove = document.getElementById(this.dataset.rowid);
                if (rowToRemove) {
                    rowToRemove.remove();
                }
            });
        }

        /**
         * Coleta os dados do formulário e exporta para um arquivo Excel (.xlsx).
         */
        function exportarParaExcel() {
            const rows = lancamentosContainer.querySelectorAll('div[id^="row-"]');
            
            if (rows.length === 0) {
                alert("Não há lançamentos para exportar!");
                return;
            }

            const dataToExport = [];
            // Adiciona o cabeçalho no array de dados
            dataToExport.push(["Data", "Descrição", "Valor", "Conta", "Categoria"]);

            // Itera sobre cada linha de lançamento
            rows.forEach(row => {
                const dataInput = row.querySelector('input[name="data"]').value;
                const descricao = row.querySelector('input[name="descricao"]').value;
                const valor = parseFloat(row.querySelector('input[name="valor"]').value) || 0;
                const conta = row.querySelector('select[name="conta"]').value;
                const categoria = row.querySelector('select[name="categoria"]').value;

                // Formata a data de yyyy-mm-dd para dd/mm/yyyy
                let dataFormatada = '';
                if (dataInput) {
                    const [ano, mes, dia] = dataInput.split('-');
                    dataFormatada = `${dia}/${mes}/${ano}`;
                }
                
                dataToExport.push([dataFormatada, descricao, valor, conta, categoria]);
            });

            // Usa a biblioteca SheetJS para criar o arquivo Excel
            const worksheet = XLSX.utils.aoa_to_sheet(dataToExport);
            
            // Ajusta a largura das colunas
            worksheet['!cols'] = [
                { wch: 12 }, // Data
                { wch: 35 }, // Descrição
                { wch: 15 }, // Valor
                { wch: 20 }, // Conta
                { wch: 25 }  // Categoria
            ];

            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, "Lançamentos");

            // Gera o arquivo e dispara o download
            XLSX.writeFile(workbook, "Lancamentos_Financeiros.xlsx");
        }


        // --- EVENT LISTENERS ---
        addRowBtn.addEventListener('click', adicionarLinha);
        exportBtn.addEventListener('click', exportarParaExcel);

        // --- INICIALIZAÇÃO ---
        // Adiciona uma primeira linha ao carregar a página para o usuário começar
        adicionarLinha();
    </script>

</body>
</html>
